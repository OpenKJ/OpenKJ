name: Pull request Windows build test

on: 
  push:
    branches: [winbuild-testing]
  pull_request:
    branches: [master, release]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: seanmiddleditch/gha-setup-ninja@master

    - name: Download GST Installer
      uses: carlosperate/download-file-action@v1.0.3
      id: download-gst
      with:
        file-url: 'https://gstreamer.freedesktop.org/data/pkg/windows/1.18.3/msvc/gstreamer-1.0-msvc-x86_64-1.18.3.msi'
        file-name: 'gstreamer.msi'
        location: './downloads'

    - name: Download GST-Dev Installer
      uses: carlosperate/download-file-action@v1.0.3
      id: download-gst-dev
      with:
        file-url: 'https://gstreamer.freedesktop.org/data/pkg/windows/1.18.3/msvc/gstreamer-1.0-devel-msvc-x86_64-1.18.3.msi'
        file-name: 'gstreamer-devel.msi'
        location: './downloads'

    - name: Install GST
      run: |
        cmd /c start /wait msiexec /package ${{ steps.download-gst.outputs.file-path }} /passive ADDLOCAL=ALL
        
    - name: Make dist copy of gstreamer
      run: |
        cp -Rv c:/gstreamer ./gstreamer-dist
      shell: bash

    - name: Install GST-Dev
      run: |
        cmd /c start /wait msiexec /package ${{ steps.download-gst-dev.outputs.file-path }} /passive ADDLOCAL=ALL
  
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
       path: ../Qt
       key: ${{ runner.os }}-QtCache-5.12.10

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
       cached: ${{ steps.cache-qt.outputs.cache-hit }}
       version: '5.12.10'
       modules: 'core gui sql network widgets concurrent svg printsupport'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: cmd
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        cmake .. -G Ninja

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE


name: Create MacOS Build & Installer

on:
  push:
    tags:
      - '*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive

    - uses: lukka/get-cmake@latest

    - name: Get version from git tag
      id: get_version
      uses: dhkatz/get-version-action@v3.0.0

    - name: Get OpenKJ version being buit
      run: |
        if [ "${{ steps.get_version.outputs.prerelease }}" = "" ];then
          RTYPE="release"
          BRANCH="release"
        elif [ "${{ steps.get_version.outputs.prerelease }}" = "unstable" ];then
          RTYPE="unstable"
          BRANCH="unstable"
        else
          RTYPE=${{ steps.get_version.outputs.prerelease }}
          BRANCH="unstable"
        fi
        OKJVER=${{ steps.get_version.outputs.version-without-v }}
        FN="OpenKJ-${OKJVER}-osx-installer.pkg"
        echo "installer_fn=${FN}" >> $GITHUB_ENV
        echo "rtype=${RTYPE}" >> $GITHUB_ENV
        echo "branch=${BRANCH}" >> $GITHUB_ENV

    - name: Update files with new version info
      if: steps.get_version.outputs.is-semver == 'true'
      run: |
        MAJOR=${{ steps.get_version.outputs.major }}
        MINOR=${{ steps.get_version.outputs.minor }}
        PATCH=${{ steps.get_version.outputs.patch }}
        BRANCH=${{ env.rtype }}

        echo "Updating okjversion.h"
        echo "#ifndef OKJVERSION_H" > src/okjversion.h
        echo "#define OKJVERSION_H" >> src/okjversion.h
        echo >> src/okjversion.h
        echo "#define OKJ_VERSION_MAJOR ${{ steps.get_version.outputs.major }}" >> src/okjversion.h
        echo "#define OKJ_VERSION_MINOR ${{ steps.get_version.outputs.minor }}" >> src/okjversion.h
        echo "#define OKJ_VERSION_BUILD ${{ steps.get_version.outputs.patch }}" >> src/okjversion.h
        echo "#define OKJ_VERSION_STRING \"${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }}.${{ steps.get_version.outputs.patch }}\"" >> src/okjversion.h
        echo "#define OKJ_VERSION_BRANCH \"${{ env.rtype }}\"" >> src/okjversion.h
        echo >> src/okjversion.h
        echo "#endif //OKJVERSION_H" >> src/okjversion.h
      shell: bash

    - name: Setup Signing Keychain
      uses: apple-actions/import-codesign-certs@v5
      with:
        p12-file-base64: ${{ secrets.MACOS_SIGNING_CERTS_P12 }}
        p12-password: ${{ secrets.MACOS_SIGNING_CERTS_PASS }}

    - name: install deps
      run: |
        brew install cmake ninja pkgconf cppunit utf8cpp qt@5 gstreamer
        pip install osxrelocator

    - name: Build
      env:
        LDFLAGS: "-L/opt/homebrew/opt/qt@5/lib"
        CPPFLAGS: "-I/opt/homebrew/opt/qt@5/include"
        PKG_CONFIG_PATH: "/opt/homebrew/opt/qt@5/lib/pkgconfig"
        QT_DIR: "/opt/homebrew/opt/qt@5/"
        Qt5_DIR: "/opt/homebrew/opt/qt@5/"
      run: |
        cmake -DSPDLOG_USE_BUNDLED=true -DCMAKE_BUILD_TYPE=Release -DBUNDLE_GSTREAMER=True -DMAC_SIGNING_IDENTITY=47W8CPBS5A . -B build -G Ninja
        ninja -C build

    - name: Sign app bundle
      working-directory: ${{github.workspace}}/build
      run: |
        codesign -s "Developer ID Application: Isaac Lightburn (47W8CPBS5A)" --identifier "org.freedesktop.gstreamer" --timestamp openkj.app/Contents/Frameworks/GStreamer.framework
        codesign --force -s "Developer ID Application: Isaac Lightburn (47W8CPBS5A)" --identifier "org.openkj.openkj" --timestamp openkj.app

    - name: Upload app
      uses: actions/upload-artifact@v4
      with:
        path: build/openkj.app
        name: openkj.app

    - name: Create installer
      working-directory: ${{github.workspace}}/build
      run: |
        mkdir -p fakeroot/Applications
        mv "openkj.app" fakeroot/Applications/OpenKJ.app
        pkgbuild --root "fakeroot" --component-plist ../macos/openkj.plist --identifier "org.openkj.openkj" --sign "Developer ID Installer: Isaac Lightburn (47W8CPBS5A)" ${{ env.installer_fn }}

#  Disabled notarization because gstreamer doesn't ship hardened runtimes so it's pointelss to try as long as we're bundling gstreamer
#    - name: "Notarize Release Build"
#      uses: devbotsxyz/xcode-notarize@v1
#      with:
#        product-path: ${{ github.workspace }}/build/${{ env.installer_fn }}
#        primary-bundle-id: org.openkj.openkj
#        appstore-connect-username: ${{ secrets.APPLE_APP_STORE_CONNECT_USER }}
#        appstore-connect-password: ${{ secrets.APPLE_APP_STORE_CONNECT_PASS }}

#    - name: "Staple Release Build"
#      uses: devbotsxyz/xcode-staple@v1
#      with:
#        product-path: ${{ github.workspace }}/build/${{ env.installer_fn }}

    - name: Upload to OpenKJ website
      id: upload_installer
      if: steps.get_version.outputs.is-semver == 'true'
      uses: google-github-actions/upload-cloud-storage@main
      with:
        credentials: ${{ secrets.gcp_credentials }}
        path: ${{ github.workspace }}/build/${{ env.installer_fn }}
        destination: openkj-installers/macos/${{ env.branch }}

    - name: Release
      uses: softprops/action-gh-release@v2
      if: steps.get_version.outputs.is-semver == 'true'
      with:
        files: ${{ github.workspace }}/build/${{ env.installer_fn }}
        prerelease: ${{ env.rtype != 'release' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
